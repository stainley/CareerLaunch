name: Backend CI

on:
  push:
    branches-ignore: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: [ self-hosted, local, java21, maven ]
    strategy:
      matrix:
        service: [ shared-library, notification-service ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Debug SonarQube URL
        run: echo "SONAR_HOST_URL is $LOCAL_SONAR_HOST_URL"

      - name: Build Shared Library
        run: |
          cd backend/shared-library
          mvn clean install -DskipTests

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: |
          cd backend/${{ matrix.service }}
          mvn clean install -DskipTests=false

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }}
          if [ "${{ github.event_name }}" = "pull_request" ]; then
          mvn sonar:sonar \
           -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
           -Dsonar.projectName="${{ matrix.service }}" \
           -Dsonar.host.url=${SONAR_HOST_URL} \
           -Dsonar.token=${SONAR_TOKEN} \
           -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
           -Dsonar.pullrequest.branch=${{ github.head_ref }} \
           -Dsonar.pullrequest.base=${{ github.base_ref }}
          else
          mvn sonar:sonar \
           -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
           -Dsonar.projectName="${{ matrix.service }}" \
           -Dsonar.host.url=${SONAR_HOST_URL} \
           -Dsonar.token=${SONAR_TOKEN} \
           -Dsonar.branch.name=${{ github.ref_name }}
          fi

          - name: Check SonarQube Quality Gate Status
            env:
              SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
              SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
            run: |
              PROJECT_KEY="com.salapp.career.launch:${{ matrix.service }}"
              BRANCH_NAME="${{ github.event_name == 'pull_request' && github.base_ref || github.ref_name }}"
              
              STATUS=$(curl -u "${SONAR_TOKEN}:" -s \
                "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&branch=${BRANCH_NAME}" | \
                jq -r '.projectStatus.status')
              
              echo "Quality Gate Status: $STATUS"
              
              if [ "$STATUS" != "OK" ]; then
                echo "Quality Gate failed for ${PROJECT_KEY} on branch ${BRANCH_NAME}"
                exit 1
              fi

  sonar-main:
    runs-on: [ self-hosted, local, java21, maven ]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [ notification-service ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Build Shared Library
        run: |
          cd backend/shared-library
          mvn clean install -DskipTests

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: |
          cd backend/${{ matrix.service }}
          mvn clean install -DskipTests=false

      - name: SonarQube Scan (Main Branch)
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }} && \
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
            -Dsonar.projectName="${{ matrix.service }}" \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Check SonarCloud Quality Gate Status (Main Branch)
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="com.salapp.career.launch:${{ matrix.service }}"
          BRANCH_NAME=${{ github.ref_name }}
          
          # Query SonarCloud API for Quality Gate status
          STATUS=$(curl -u "${SONAR_TOKEN}:" -s \
            "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&branch=${BRANCH_NAME}" | \
            jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $STATUS"
          
          # Fail the job if Quality Gate status is not OK
          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed for ${PROJECT_KEY} on branch ${BRANCH_NAME}"
            exit 1
          fi

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [ service-discovery, shared-library, user-service, api-gateway, notification-service, auth-server ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: |
          cd backend/${{ matrix.service }}
          mvn package -DskipTests=true

      - name: Deploy JAR
        run: |
          scp backend/${{ matrix.service }}/target/*.jar user@your-server:/path/to/deploy
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}