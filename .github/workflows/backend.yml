name: Backend CI

on:
  push:
    branches-ignore: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: [ self-hosted, local, java21, maven ]
    strategy:
      matrix:
        service: [ shared-library, notification-service ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Debug SonarQube URL
        run: echo "SONAR_HOST_URL is $LOCAL_SONAR_HOST_URL"

      - name: Build Shared Library
        run: |
          cd backend/shared-library
          mvn clean install -DskipTests

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: |
          cd backend/${{ matrix.service }}
          mvn clean install -DskipTests=false

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }}
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
            -Dsonar.projectName="${{ matrix.service }}" \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}

      - name: Check SonarQube Quality Gate Status
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="com.salapp.career.launch:${{ matrix.service }}"
          STATUS=$(curl -u "${SONAR_TOKEN}:" -s \
          "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" | \
          jq -r '.projectStatus.status')
          
          echo "Quality Gate Status for ${{ matrix.service }}: $STATUS"
          echo "QUALITY_GATE_STATUS=$STATUS" >> $GITHUB_OUTPUT
          
          if [ "$STATUS" != "OK" ] && [ "$STATUS" != "ERROR" ]; then
          echo "Quality Gate status unknown or never executed: $STATUS"
          fi

      - name: Update README with Quality Gate Badge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SERVICE="${{ matrix.service }}"
          STATUS="${{ steps.quality-gate.outputs.QUALITY_GATE_STATUS }}"
          
          # Determine badge details
          if [ "$STATUS" = "OK" ]; then
            BADGE_TEXT="✅%20Quality%20Gate%20Passed"
            BADGE_COLOR="green"
          elif [ "$STATUS" = "ERROR" ]; then
            BADGE_TEXT="❌%20Quality%20Gate%20Failed"
            BADGE_COLOR="red"
          else
            BADGE_TEXT="⚠️%20Quality%20Gate%20Never%20Executed"
            BADGE_COLOR="yellow"
          fi
          
          BADGE_URL="https://img.shields.io/badge/quality_gate-passed-${BADGE_COLOR}?logo=sonarqube&labelColor=grey"
          BADGE_MARKDOWN="![Quality Gate Status for ${SERVICE}](${BADGE_URL})"
          
          # Update README.md: Replace or append the badge
          if grep -q "Quality Gate Status for ${SERVICE}" README.md; then
            sed -i "s|!\[Quality Gate Status for ${SERVICE}\].*|${BADGE_MARKDOWN}|" README.md
          else
            echo "${BADGE_MARKDOWN}" >> README.md
          fi
          
          # Commit and push changes
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add README.md
          git commit -m "Update Quality Gate badge for ${SERVICE}" || echo "No changes to commit"
          git push https://x-access-token:${GH_TOKEN}@github.com/stainley/CareerLaunch.git HEAD:${{ github.ref_name }} || echo "Push failed"

  sonar-main:
    runs-on: [ self-hosted, local, java21, maven ]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [ notification-service ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Build Shared Library
        run: |
          cd backend/shared-library
          mvn clean install -DskipTests

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: |
          cd backend/${{ matrix.service }}
          mvn clean install -DskipTests=false

      - name: SonarQube Scan (Main Branch)
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }} && \
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
            -Dsonar.projectName="${{ matrix.service }}" \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}
            -Dsonar.branch.name=${{ github.ref_name }}

      - name: Check SonarQube Quality Gate Status
        id: quality-gate
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="com.salapp.career.launch:${{ matrix.service }}"
          STATUS=$(curl -u "${SONAR_TOKEN}:" -s \
          "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" | \
          jq -r '.projectStatus.status')
          
          echo "Quality Gate Status for ${{ matrix.service }}: $STATUS"
          echo "QUALITY_GATE_STATUS=$STATUS" >> $GITHUB_OUTPUT
          
          if [ "$STATUS" != "OK" ] && [ "$STATUS" != "ERROR" ]; then
          echo "Quality Gate status unknown or never executed: $STATUS"
          fi

      - name: Update README with Quality Gate Badge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SERVICE="${{ matrix.service }}"
          STATUS="${{ steps.quality-gate.outputs.QUALITY_GATE_STATUS }}"
          
          # Determine badge details
          if [ "$STATUS" = "OK" ]; then
            BADGE_TEXT="✅%20Quality%20Gate%20Passed"
            BADGE_COLOR="green"
          elif [ "$STATUS" = "ERROR" ]; then
            BADGE_TEXT="❌%20Quality%20Gate%20Failed"
            BADGE_COLOR="red"
          else
            BADGE_TEXT="⚠️%20Quality%20Gate%20Never%20Executed"
            BADGE_COLOR="yellow"
          fi
          
          BADGE_URL="https://img.shields.io/badge/quality_gate-passed-${BADGE_COLOR}?logo=sonarqube&labelColor=grey"
          BADGE_MARKDOWN="![Quality Gate Status for ${SERVICE}](${BADGE_URL})"
          
          # Update README.md: Replace or append the badge
          if grep -q "Quality Gate Status for ${SERVICE}" README.md; then
            sed -i "s|!\[Quality Gate Status for ${SERVICE}\].*|${BADGE_MARKDOWN}|" README.md
          else
            echo "${BADGE_MARKDOWN}" >> README.md
          fi
          
          # Commit and push changes
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add README.md
          git commit -m "Update Quality Gate badge for ${SERVICE}" || echo "No changes to commit"
          git push https://x-access-token:${GH_TOKEN}@github.com/stainley/CareerLaunch.git HEAD:${{ github.ref_name }} || echo "Push failed"      

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [ service-discovery, shared-library, user-service, api-gateway, notification-service, auth-server ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: |
          cd backend/${{ matrix.service }}
          mvn package -DskipTests=true

      - name: Deploy JAR
        run: |
          scp backend/${{ matrix.service }}/target/*.jar user@your-server:/path/to/deploy
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}