name: Backend CI

on:
  push:
    branches-ignore: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  build-and-test:
    runs-on: [ self-hosted, local, java21, maven ]
    permissions:
      contents: write  # Grant write access
    strategy:
      matrix:
        service: [ shared-library, notification-service, service-discovery ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: '3.9.6'

      - name: Debug SonarQube URL
        run: echo "SONAR_HOST_URL is $LOCAL_SONAR_HOST_URL"

      - name: Build Shared Library
        run: |
          cd backend/shared-library
          mvn clean install -DskipTests

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/${{ matrix.service }}/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test with Maven
        run: |
          cd backend/${{ matrix.service }}
          mvn clean install -DskipTests=false

      - name: Build and Test with Coverage
        run: |
          cd backend/${{ matrix.service }}
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install \
            -DskipTests=false \
            -Djacoco.reportPath=target/jacoco.exec

      - name: Generate JaCoCo Report
        run: |
          cd backend/${{ matrix.service }}
          mvn jacoco:report

      - name: SonarQube Scan with Coverage
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }}
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd backend/${{ matrix.service }}
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:${{ matrix.service }} \
            -Dsonar.projectName="${{ matrix.service }}" \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}
          
          sleep 120  # Wait 2 minutes for SonarQube to process

      - name: Check SonarQube Quality Gate Status
        id: quality-gate
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          PROJECT_KEY="com.salapp.career.launch:${{ matrix.service }}"
          MAX_RETRIES=20
          RETRY_INTERVAL=90   # 15 minutes total wait time

          for ((i=1; i<=MAX_RETRIES; i++)); do
            RESPONSE=$(curl -u "${SONAR_TOKEN}:" -s "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')
          
            echo "Attempt $i: Status = $STATUS"
            echo "Full response: $RESPONSE"  # Debugging
          
            if [ "$STATUS" = "OK" ]; then
              echo "QUALITY_GATE_STATUS=OK" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" = "ERROR" ]; then
              echo "QUALITY_GATE_STATUS=ERROR" >> $GITHUB_OUTPUT
              exit 1
            fi
          
            sleep $RETRY_INTERVAL
          done

          echo "Timed out waiting for Quality Gate result"
          exit 1

      - name: Clean Up Previous Rebase
        run: |
          if [ -d ".git/rebase-merge" ]; then
            echo "Cleaning up incomplete rebase..."
            rm -fr ".git/rebase-merge"
          fi

      - name: Update README with Quality Gate Badge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use built-in token
        run: |
          set -x  # Enable debug output
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}
          
          # Sync with remote branch
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME || { echo "Rebase failed"; exit 1; }
          
          SERVICE="${{ matrix.service }}"
          STATUS="${{ steps.quality-gate.outputs.QUALITY_GATE_STATUS }}"
          
          echo "DEBUG: STATUS is '$STATUS'"
          STATUS_MESSAGE=""
          if [ "$STATUS" = "OK" ]; then     
            STATUS_MESSAGE="passed"
            BADGE_COLOR="green"
          elif [ "$STATUS" = "ERROR" ]; then
            STATUS_MESSAGE="failed"
            BADGE_COLOR="red"
          else
            STATUS_MESSAGE="no executed"
            BADGE_COLOR="yellow"
          fi
          
          BADGE_URL="https://img.shields.io/badge/quality_gate-${STATUS_MESSAGE}-${BADGE_COLOR}?logo=sonarqube&labelColor=grey"
          ESCAPED_URL=$(echo "$BADGE_URL" | sed 's/&/\\&/g')  # Escape & for sed
          BADGE_MARKDOWN="- **${SERVICE}**:  \n  ![Quality Gate Status](${ESCAPED_URL})"
          
          if grep -q "^- \*\*${SERVICE}\*\*:" README.md; then
            sed -i "/^- \*\*${SERVICE}\*\*:/ {N; d;}" README.md  # Delete service line + next line
          fi
          
          if grep -q "### ðŸ–§ Backend" README.md; then
            sed -i "/### ðŸ–§ Backend/a \\\n${BADGE_MARKDOWN}" README.md
          else
            echo -e "### ðŸ–§ Backend\n\n${BADGE_MARKDOWN}" >> README.md
          fi
          
          git add README.md
          git commit -m "Update Quality Gate badge for ${SERVICE}" || echo "No changes to commit"
          git push "https://${GH_TOKEN}@github.com/stainley/CareerLaunch.git" HEAD:${BRANCH_NAME} || echo "Push failed"

      - name: Fail Pipeline on Quality Gate Error
        if: steps.quality-gate.outputs.QUALITY_GATE_STATUS != 'OK'
        run: exit 1

      - name: Archive JAR Artifacts
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p artifacts
          cp backend/${{ matrix.service }}/target/*.jar artifacts/${{ matrix.service }}-${{ github.sha }}.jar

          - name: Upload Artifacts
            if: github.ref == 'refs/heads/main'
            uses: actions/upload-artifact@v4
            with:
              name: ${{ matrix.service }}-artifacts
              path: artifacts/${{ matrix.service }}-${{ github.sha }}.jar
  release:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    permissions:
      contents: write  # Required to create releases
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set Version from Git Tag or Commit
        id: version
        run: |
          # Use latest tag or fallback to commit SHA
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "$VERSION" = "v0.0.0" ]; then
            VERSION="v0.0.0-$(date +%Y%m%d)-${{ github.sha }}"
          else
            VERSION=$(echo $VERSION | sed 's/v//')  # Remove 'v' prefix for increment
            PATCH=$(echo $VERSION | cut -d'.' -f3)
            MINOR=$(echo $VERSION | cut -d'.' -f2)
            MAJOR=$(echo $VERSION | cut -d'.' -f1)
            NEW_PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.RELEASE_VERSION }}
          release_name: Release v${{ steps.version.outputs.RELEASE_VERSION }}
          body: |
            ### CareerLaunch Release v${{ steps.version.outputs.RELEASE_VERSION }}
            Automated release of backend microservices:
            - ${{ matrix.service }}
            - shared-library
            - notification-service
            - service-discovery
            Generated on: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for artifact in artifacts/*/*.jar; do
            gh release upload v${{ steps.version.outputs.RELEASE_VERSION }} "$artifact" --repo stainley/CareerLaunch
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [ service-discovery, shared-library, user-service, api-gateway, notification-service, auth-server ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR
        run: |
          cd backend/${{ matrix.service }}
          mvn package -DskipTests=true

      - name: Deploy JAR
        run: |
          scp backend/${{ matrix.service }}/target/*.jar user@your-server:/path/to/deploy
        env:
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}