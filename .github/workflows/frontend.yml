name: FrontEnd CI

on:
  push:
    branches-ignore: [ main ]
    paths:
      - 'frontend/react-vite/**'
  pull_request:
    paths:
      - 'frontend/react-vite/**'

jobs:
  build-and-test:
    runs-on: [ self-hosted, local ] # Ensure your self-hosted runner has Node.js and sonar-scanner installed
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node.js 20.x
          cache: 'npm' # Cache npm dependencies
          cache-dependency-path: 'frontend/react-vite/package-lock.json' # Specify path to lock file
      - name: Install Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=$(dirname $(dirname $(which java)))" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci # Use npm ci for reproducible builds
        working-directory: frontend/react-vite

      - name: Build project
        run: npm run build # Ensure Vite builds successfully
        working-directory: frontend/react-vite

      - name: Run tests with coverage
        run: npm test -- --coverage # Assumes Jest or Vitest with coverage configured
        working-directory: frontend/react-vite
        env:
          CI: true # Ensures tests run in CI mode
        continue-on-error: true

      - name: Verify coverage output
        run: |
          echo "Checking coverage directory..."
          ls -la frontend/react-vite/coverage
          cat frontend/react-vite/coverage/lcov.info
        if: always() # Always run even if tests fail

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: frontend/react-vite/coverage/**/*.*

      - name: Install SonarQube Scanner Globally
        run: npm install -g sonar-scanner

      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd frontend/react-vite
          sonar-scanner \
            -Dsonar.projectKey=com.salapp.career.launch:react-vite \
            -Dsonar.projectName=react-vite \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions="**/*.test.tsx,**/*.test.ts" \
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}

      - name: SonarQube Scan with Coverage
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd frontend/react-vite
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:react-vite \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          cd frontend/react-vite
          mvn sonar:sonar \
            -Dsonar.projectKey=com.salapp.career.launch:react-vite \
            -Dsonar.projectName=react-vite \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN}

          sleep 120  # Wait 2 minutes for SonarQube to process

      - name: Check SonarQube Quality Gate Status
        id: quality-gate
        env:
          SONAR_TOKEN: ${{ secrets.LOCAL_SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.LOCAL_SONAR_HOST_URL }}
        run: |
          PROJECT_KEY=com.salapp.career.launch:react-vite
          MAX_RETRIES=20
          RETRY_INTERVAL=90   # 15 minutes total wait time

          for ((i=1; i<=MAX_RETRIES; i++)); do
            RESPONSE=$(curl -u "${SONAR_TOKEN}:" -s "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}")
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')

            echo "Attempt $i: Status = $STATUS"
            echo "Full response: $RESPONSE"  # Debugging

            if [ "$STATUS" = "OK" ]; then
              echo "QUALITY_GATE_STATUS=OK" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" = "ERROR" ]; then
              echo "QUALITY_GATE_STATUS=ERROR" >> $GITHUB_OUTPUT
              exit 1
            fi

            sleep $RETRY_INTERVAL
          done

          echo "Timed out waiting for Quality Gate result"
          exit 1

      - name: Clean Up Previous Rebase
        run: |
          if [ -d ".git/rebase-merge" ]; then
            echo "Cleaning up incomplete rebase..."
            rm -fr ".git/rebase-merge"
          fi

      - name: Update README with Quality Gate Badge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use built-in token
        run: |
          set -x  # Enable debug output
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}

          # Sync with remote branch
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME || { echo "Rebase failed"; exit 1; }

          SERVICE=react-vite
          STATUS="${{ steps.quality-gate.outputs.QUALITY_GATE_STATUS }}"

          echo "DEBUG: STATUS is '$STATUS'"
          STATUS_MESSAGE=""
          if [ "$STATUS" = "OK" ]; then     
            STATUS_MESSAGE="passed"
            BADGE_COLOR="green"
          elif [ "$STATUS" = "ERROR" ]; then
            STATUS_MESSAGE="failed"
            BADGE_COLOR="red"
          else
            STATUS_MESSAGE="no executed"
            BADGE_COLOR="yellow"
          fi

          BADGE_URL="https://img.shields.io/badge/quality_gate-${STATUS_MESSAGE}-${BADGE_COLOR}?logo=sonarqube&labelColor=grey"
          ESCAPED_URL=$(echo "$BADGE_URL" | sed 's/&/\\&/g')  # Escape & for sed
          BADGE_MARKDOWN="- **${SERVICE}**:  \n  ![Quality Gate Status](${ESCAPED_URL})"

          if grep -q "^- \*\*${SERVICE}\*\*:" README.md; then
            sed -i "/^- \*\*${SERVICE}\*\*:/ {N; d;}" README.md  # Delete service line + next line
          fi

          if grep -q "### 🖥️ Frontend" README.md; then
            sed -i "/### 🖥️ Frontend/a \\\n${BADGE_MARKDOWN}" README.md
          else
            echo -e "### 🖥️ Frontend\n\n${BADGE_MARKDOWN}" >> README.md
          fi

          git add README.md
          git commit -m "Update Quality Gate badge for ${SERVICE}" || echo "No changes to commit"
          git push "https://${GH_TOKEN}@github.com/stainley/CareerLaunch.git" HEAD:${BRANCH_NAME} || echo "Push failed"

      - name: Fail Pipeline on Quality Gate Error
        if: steps.quality-gate.outputs.QUALITY_GATE_STATUS != 'OK'
        run: exit 1